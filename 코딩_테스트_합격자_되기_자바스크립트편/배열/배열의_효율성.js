/**
 * # 배열 연산의 시간 복잡도.
 * 배열은 임의 접근이라는 방법으로 배열의 모든 위치에 있는 데이터에 단 한 번에 접근할 수 있음.
 * 따라서 데이터에 접근하기 위한 시간 복잡도는 O(1).
 *
 * # 배열에 데이터를 추가하는 경우 - 배열은 데이터를 어디에 저장하느냐에 따라 추가 연산에 대한 시간 복잡도가 달라짐.
 * 삭제 연산의 경우도 추가와 마찬가지의 시간 복잡도를 가짐.
 *
 * 1. 맨 뒤에 삽입/삭제 할 경우.
 * 맨 뒤에 삽입할 때는 해당 위치에 임의 접근을 바로 할 수 있으며, 데이터를 삽입해도 다른 데이터의 위치에
 * 영향을 주지 않기 때문에, 시간 복잡도는 O(1)
 *
 * 2. 맨 앞에 삽입/삭제 할 경우.
 * 이 경우 기존 데이터들을 모두 뒤로 한 칸씩 밀어야 하기 때문에 미는 연산을 진행.
 * 데이터 개수를 N개로 일반화 하면, 시간 복잡도는 O(N)
 *
 * 3. 중간에 삽입/삭제 할 경우.
 * 특정 위치에 데이터를 삽입/삭제 경우, 해당 위치 이후의 데이터들의 위치를 모두 변경시켜야함.
 * 다시 말해, 현재 삽입한 데이터 뒤에 있는 데이터 개수만큼의 연산을 진행하는데,
 * 밀어야 하는 데이터의 개수가 N이라면, 시간 복잡도는 O(N)
 *
 * # 배열을 선택할 때 고려할 점.
 * 1. 할당할 수 있는 메모리의 크기를 확인해야 함.
 * - 배열로 표현하려는 데이터가 너무 많은 경우 런타임에서 배열 할당에 실패할 수 있음.
 * - 보통 정수형 1차원 배열은 1000만개, 2차원 배열은 3000*3000 크기를 최대값으로 고려.
 * 2. 중간에 데이터 삽입이 많은지 확인해야 함.
 * - 배열은 선형 자료구조이기 때문에, 중간이나 처음에 데이터를 빈번하게 삽입하면 시간 복잡도가 높아져,
 * - 실제 시험에서 시간 초과가 발생할 수 있음.
 */
